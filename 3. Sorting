package Week4;
/*
 * A balanced binary tree is when the height of the left and right subtrees of any nodes differs 
 * by not more than -1;
 */


	class Node
	{
		int data;
		Node left,right;
		
		Node(int d)
		{
			data = d;
			left = right = null;
		}
	}
	
	//Calculate height
	class Height
	{
		int height = 0;
	}
	
	 class BalancedBinaryTrees 
	{
		Node root;
		
		//Check the height balance
		boolean checkBalanceHeight(Node root, Height height)
		{
			if(root == null)
			{
				height.height = 0;
				return true;
			}
			
			Height leftHeight = new Height();
			Height rightHeight = new Height();
			
			boolean l = checkBalanceHeight(root.left,leftHeight);
			boolean r = checkBalanceHeight(root.right, rightHeight);
			int lh = leftHeight.height;
			int rh = rightHeight.height;
			height.height = (lh > rh ? lh : rh) + 1;
			
			if(lh - rh >= 2 || (rh - lh) >=2 ) return false;
			else return l && r;
			
		}
		
		public static void main(String args[])
		{
			BalancedBinaryTrees tree = new BalancedBinaryTrees();
			Height height = new Height();
			
			tree.root = new Node(1);
			tree.root.left = new Node(2);
			tree.root.right = new Node(3);
			tree.root.left.left = new Node(4);
			tree.root.left.left.left = new Node(5);
			
			if(tree.checkBalanceHeight(tree.root, height))
			{
				System.out.println("Tree is balanced");
			}
			
			else
			{
				System.out.println("Tree is not balanced");
			}
			
			
			
		}
	}
	 
	
	
	

